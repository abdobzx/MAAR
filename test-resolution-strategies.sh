#!/bin/bash

# Script pour tester les diff√©rentes strat√©gies de r√©solution Docker

echo "üîß Test des strat√©gies de r√©solution 'resolution-too-deep'"
echo "========================================================"

# Fonction pour tester un Dockerfile
test_dockerfile() {
    local dockerfile=$1
    local tag=$2
    
    echo ""
    echo "üß™ Test de $dockerfile -> $tag"
    echo "----------------------------------------"
    
    if docker build -f "$dockerfile" -t "$tag" . 2>&1 | tee "build-${tag}.log"; then
        echo "‚úÖ $dockerfile: Build r√©ussi"
        docker rmi "$tag" 2>/dev/null || true
        return 0
    else
        echo "‚ùå $dockerfile: Build √©chou√©"
        echo "üìã Derni√®res lignes du log:"
        tail -10 "build-${tag}.log"
        return 1
    fi
}

# Fonction pour v√©rifier Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        echo "‚ùå Docker daemon n'est pas en cours d'ex√©cution"
        echo "   D√©marrez Docker et relancez ce script"
        exit 1
    fi
    
    echo "‚úÖ Docker est disponible"
}

# V√©rifier que Docker fonctionne
check_docker

# Nettoyer les anciens logs
rm -f build-*.log

# Tester les diff√©rentes strat√©gies
echo ""
echo "üéØ Strat√©gies √† tester:"
echo "1. Dockerfile.progressive - Installation progressive avec fallback"
echo "2. Dockerfile.phased - Installation en phases s√©par√©es"
echo "3. requirements.staging.txt simplifi√©"

success_count=0
total_count=0

# Test 1: Dockerfile progressif
if [ -f "Dockerfile.progressive" ]; then
    ((total_count++))
    if test_dockerfile "Dockerfile.progressive" "test-progressive"; then
        ((success_count++))
    fi
fi

# Test 2: Dockerfile par phases
if [ -f "Dockerfile.phased" ] && [ -f "requirements.core.txt" ] && [ -f "requirements.ai.txt" ]; then
    ((total_count++))
    if test_dockerfile "Dockerfile.phased" "test-phased"; then
        ((success_count++))
    fi
else
    echo "‚ö†Ô∏è  Dockerfile.phased ou fichiers requirements manquants"
fi

# R√©sum√©
echo ""
echo "========================================================"
echo "üìä R√âSULTATS:"
echo "Succ√®s: $success_count/$total_count"

if [ $success_count -gt 0 ]; then
    echo "‚úÖ Au moins une strat√©gie fonctionne!"
    echo ""
    echo "üí° RECOMMANDATIONS:"
    echo "1. Utilisez la strat√©gie qui a fonctionn√©"
    echo "2. Le probl√®me 'resolution-too-deep' est r√©solu"
    echo "3. Votre build Docker devrait maintenant r√©ussir"
else
    echo "‚ùå Toutes les strat√©gies ont √©chou√©"
    echo ""
    echo "üîç PROCHAINES √âTAPES:"
    echo "1. V√©rifiez les logs de build: build-*.log"
    echo "2. Simplifiez encore plus les requirements"
    echo "3. Consid√©rez l'utilisation d'une image de base diff√©rente"
fi

# Nettoyer les images de test
docker rmi test-progressive test-phased 2>/dev/null || true

echo ""
echo "üìÅ Logs disponibles:"
ls -la build-*.log 2>/dev/null || echo "Aucun log g√©n√©r√©"
