#!/bin/bash

# =============================================================================
# D√âPLOIEMENT MANUEL OPTIMIS√â - SYST√àME MAR
# Version corrig√©e avec r√©solution des conflits de d√©pendances
# =============================================================================

set -e

echo "üöÄ D√âPLOIEMENT MANUEL SYST√àME MAR - VERSION CORRIG√âE"
echo "===================================================="
echo ""

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}[√âTAPE] $1${NC}"
}

print_success() {
    echo -e "${GREEN}[SUCC√àS] $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}[ATTENTION] $1${NC}"
}

print_error() {
    echo -e "${RED}[ERREUR] $1${NC}"
}

print_info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# V√©rification des pr√©requis
print_step "V√©rification des pr√©requis..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©"
    exit 1
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    print_error "Docker Compose n'est pas install√©"
    exit 1
fi

print_success "Docker et Docker Compose sont disponibles"

# V√©rification des fichiers requis
print_step "V√©rification des fichiers requis..."

required_files=(
    "requirements.final.txt"
    "Dockerfile.ultimate"
    "docker-compose.ultimate.yml"
)

for file in "${required_files[@]}"; do
    if [[ -f "$file" ]]; then
        print_success "Fichier trouv√©: $file"
    else
        print_error "Fichier manquant: $file"
        print_info "Assurez-vous d'√™tre dans le bon r√©pertoire et d'avoir tous les fichiers"
        exit 1
    fi
done

echo ""

# Affichage des corrections appliqu√©es
print_step "R√©sum√© des corrections appliqu√©es..."
echo ""
print_info "Corrections de d√©pendances:"
echo "  ‚úì httpx==0.25.2 (maintenu - version stable)"
echo "  ‚úì ollama (suppression contrainte version)"
echo "  ‚úì langchain==0.1.20 (downgrade pour compatibilit√© CrewAI)"
echo "  ‚úì langchain-community==0.0.38 (downgrade pour compatibilit√©)"
echo "  ‚úì cryptography==42.0.8 (mise √† jour vers version disponible)"
echo ""

# Demande de confirmation
read -p "Voulez-vous continuer avec le d√©ploiement? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_warning "D√©ploiement annul√© par l'utilisateur"
    exit 0
fi

echo ""

# √âtape 1: Nettoyage
print_step "1/9 - Nettoyage de l'environnement Docker..."

# Arr√™ter les conteneurs existants
if docker-compose -f docker-compose.ultimate.yml ps -q | grep -q .; then
    print_info "Arr√™t des conteneurs existants..."
    docker-compose -f docker-compose.ultimate.yml down
    print_success "Conteneurs arr√™t√©s"
else
    print_info "Aucun conteneur en cours d'ex√©cution"
fi

# Nettoyage des images orphelines (optionnel)
print_info "Nettoyage des ressources Docker inutilis√©es..."
docker system prune -f
print_success "Nettoyage termin√©"

echo ""

# √âtape 2: Validation de requirements.final.txt
print_step "2/9 - Validation des d√©pendances..."

if grep -q "httpx==0.25.2" requirements.final.txt && \
   grep -q "langchain==0.1.20" requirements.final.txt && \
   grep -q "cryptography==42.0.8" requirements.final.txt; then
    print_success "Toutes les corrections sont pr√©sentes dans requirements.final.txt"
else
    print_error "Les corrections ne sont pas appliqu√©es dans requirements.final.txt"
    print_info "V√©rifiez que le fichier contient les bonnes versions"
    exit 1
fi

echo ""

# √âtape 3: Construction de l'image
print_step "3/9 - Construction de l'image Docker..."

print_info "D√©but de la construction (cela peut prendre plusieurs minutes)..."
print_info "Construction avec Dockerfile.ultimate..."

if docker build -f Dockerfile.ultimate -t mar-system:latest .; then
    print_success "Image construite avec succ√®s!"
else
    print_error "√âchec de la construction de l'image"
    print_info "V√©rifiez les logs ci-dessus pour identifier le probl√®me"
    exit 1
fi

echo ""

# √âtape 4: Test rapide de l'image
print_step "4/9 - Test rapide de l'image construite..."

print_info "Test des imports critiques..."
if docker run --rm mar-system:latest python -c "
import fastapi
import crewai  
import langchain
import httpx
import ollama
import cryptography
print('‚úÖ Tous les imports critiques r√©ussis')
"; then
    print_success "Test des imports r√©ussi!"
else
    print_error "√âchec du test des imports"
    exit 1
fi

echo ""

# √âtape 5: Cr√©ation des volumes
print_step "5/9 - Cr√©ation des volumes Docker..."

volumes=(
    "mar_postgres_data"
    "mar_redis_data" 
    "mar_qdrant_data"
    "mar_minio_data"
    "mar_prometheus_data"
)

for volume in "${volumes[@]}"; do
    if docker volume ls -q | grep -q "^${volume}$"; then
        print_info "Volume existant: $volume"
    else
        docker volume create $volume
        print_success "Volume cr√©√©: $volume"
    fi
done

echo ""

# √âtape 6: D√©marrage des services de base
print_step "6/9 - D√©marrage des services de base..."

print_info "D√©marrage de PostgreSQL, Redis, Qdrant..."
docker-compose -f docker-compose.ultimate.yml up -d postgres redis qdrant

print_info "Attente de l'initialisation des services de base (30 secondes)..."
sleep 30

# V√©rification des services de base
if docker-compose -f docker-compose.ultimate.yml ps postgres | grep -q "Up"; then
    print_success "PostgreSQL d√©marr√©"
else
    print_error "Probl√®me avec PostgreSQL"
    docker-compose -f docker-compose.ultimate.yml logs postgres
    exit 1
fi

echo ""

# √âtape 7: D√©marrage des services de monitoring
print_step "7/9 - D√©marrage des services de monitoring..."

print_info "D√©marrage de Prometheus et MinIO..."
docker-compose -f docker-compose.ultimate.yml up -d prometheus minio

print_info "Attente de l'initialisation (15 secondes)..."
sleep 15

echo ""

# √âtape 8: D√©marrage de l'API principale
print_step "8/9 - D√©marrage de l'API MAR..."

print_info "D√©marrage du service principal MAR..."
docker-compose -f docker-compose.ultimate.yml up -d mar-api

print_info "Attente du d√©marrage de l'API (45 secondes)..."
sleep 45

echo ""

# √âtape 9: V√©rification finale
print_step "9/9 - V√©rification finale du d√©ploiement..."

print_info "√âtat des services:"
docker-compose -f docker-compose.ultimate.yml ps

echo ""

# Test de sant√© de l'API
print_info "Test de l'endpoint de sant√©..."
if curl -s http://localhost:8000/health | grep -q "status"; then
    print_success "API MAR op√©rationnelle!"
else
    print_warning "L'API ne r√©pond pas encore ou il y a un probl√®me"
    print_info "V√©rification des logs de l'API..."
    docker-compose -f docker-compose.ultimate.yml logs --tail=20 mar-api
fi

echo ""

# R√©sum√© final
print_step "R√âSUM√â DU D√âPLOIEMENT"
echo ""
print_success "üéâ D√©ploiement termin√©!"
echo ""
print_info "Services disponibles:"
echo "  ‚Ä¢ API MAR:        http://localhost:8000"
echo "  ‚Ä¢ Documentation:  http://localhost:8000/docs"
echo "  ‚Ä¢ Sant√©:         http://localhost:8000/health"
echo "  ‚Ä¢ Prometheus:    http://localhost:9090"
echo "  ‚Ä¢ MinIO:         http://localhost:9001"
echo ""
print_info "Commandes utiles:"
echo "  ‚Ä¢ √âtat:          docker-compose -f docker-compose.ultimate.yml ps"
echo "  ‚Ä¢ Logs:          docker-compose -f docker-compose.ultimate.yml logs [service]"
echo "  ‚Ä¢ Arr√™t:         docker-compose -f docker-compose.ultimate.yml down"
echo "  ‚Ä¢ Red√©marrage:   docker-compose -f docker-compose.ultimate.yml restart [service]"
echo ""

# V√©rification finale optionnelle
print_warning "Voulez-vous afficher les logs r√©cents de l'API pour v√©rifier? (y/N)"
read -p "> " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    print_info "Derniers logs de l'API MAR:"
    echo "=========================="
    docker-compose -f docker-compose.ultimate.yml logs --tail=30 mar-api
fi

echo ""
print_success "D√©ploiement manuel termin√© avec succ√®s!"
print_info "Le syst√®me MAR est maintenant op√©rationnel avec les corrections de d√©pendances appliqu√©es."
