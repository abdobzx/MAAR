# Makefile pour la plateforme MAR
# Simplifie les commandes de d√©veloppement et d√©ploiement

.PHONY: help install dev test clean build deploy docs

# Variables
PYTHON := python3
PIP := pip3
DOCKER := docker
DOCKER_COMPOSE := docker-compose
KUBECTL := kubectl

# Configuration
APP_NAME := mar-platform
VERSION := $(shell cat VERSION 2>/dev/null || echo "0.1.0")
REGISTRY := ghcr.io/your-org
NAMESPACE := mar-platform

# Couleurs pour l'affichage
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# ===== AIDE =====
help: ## Affiche cette aide
	@echo "$(BLUE)ü§ñ Plateforme MAR - Commandes disponibles$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Exemples d'utilisation:$(NC)"
	@echo "  make install     # Installation des d√©pendances"
	@echo "  make dev         # Lancement en mode d√©veloppement"
	@echo "  make test        # Ex√©cution des tests"
	@echo "  make build       # Construction des images Docker"

# ===== INSTALLATION =====
setup: ## Configuration initiale compl√®te
	@echo "$(BLUE)üõ†Ô∏è  Configuration initiale de la plateforme MAR...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)üìù Cr√©ation du fichier .env...$(NC)"; \
		cp .env.example .env; \
		echo "$(GREEN)‚úÖ Fichier .env cr√©√©$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Le fichier .env existe d√©j√†$(NC)"; \
	fi
	@echo "$(BLUE)üìÅ Cr√©ation des r√©pertoires n√©cessaires...$(NC)"
	@mkdir -p data/{vector_store,uploads,backups}
	@mkdir -p logs
	@echo "$(GREEN)‚úÖ R√©pertoires cr√©√©s$(NC)"
	@echo "$(GREEN)üéâ Configuration termin√©e ! Utilisez 'make docker-up' pour d√©marrer$(NC)"

install: ## Installe les d√©pendances
	@echo "$(BLUE)üì¶ Installation des d√©pendances...$(NC)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

install-dev: ## Installe les d√©pendances de d√©veloppement
	@echo "$(BLUE)üîß Installation des d√©pendances de d√©veloppement...$(NC)"
	$(PIP) install -r requirements.txt
	$(PIP) install pytest pytest-cov black flake8 mypy pre-commit
	pre-commit install
	@echo "$(GREEN)‚úÖ Environnement de d√©veloppement configur√©$(NC)"

# ===== D√âVELOPPEMENT =====
dev: ## Lance l'environnement de d√©veloppement
	@echo "$(BLUE)üöÄ Lancement de l'environnement de d√©veloppement...$(NC)"
	$(DOCKER_COMPOSE) up --build

dev-api: ## Lance uniquement l'API en mode d√©veloppement
	@echo "$(BLUE)üöÄ Lancement de l'API MAR...$(NC)"
	$(PYTHON) -m uvicorn api.main:app --reload --host 0.0.0.0 --port 8000

dev-ui: ## Lance uniquement l'interface Streamlit
	@echo "$(BLUE)üé® Lancement de l'interface Streamlit...$(NC)"
	streamlit run ui/streamlit/app.py --server.port 8501

dev-down: ## Arr√™te l'environnement de d√©veloppement
	@echo "$(YELLOW)‚èπÔ∏è  Arr√™t de l'environnement de d√©veloppement...$(NC)"
	$(DOCKER_COMPOSE) down

# ===== TESTS =====
test: ## Ex√©cute tous les tests
	@echo "$(BLUE)üß™ Ex√©cution des tests...$(NC)"
	pytest tests/ -v --cov=. --cov-report=html --cov-report=term

test-unit: ## Ex√©cute les tests unitaires
	@echo "$(BLUE)üî¨ Tests unitaires...$(NC)"
	pytest tests/unit/ -v

test-integration: ## Ex√©cute les tests d'int√©gration
	@echo "$(BLUE)üîó Tests d'int√©gration...$(NC)"
	pytest tests/integration/ -v

test-e2e: ## Ex√©cute les tests end-to-end
	@echo "$(BLUE)üéØ Tests end-to-end...$(NC)"
	pytest tests/e2e/ -v

# ===== QUALIT√â DU CODE =====
lint: ## V√©rifie la qualit√© du code
	@echo "$(BLUE)üîç V√©rification de la qualit√© du code...$(NC)"
	black --check .
	flake8 .
	mypy . --ignore-missing-imports

format: ## Formate le code
	@echo "$(BLUE)‚ú® Formatage du code...$(NC)"
	black .
	@echo "$(GREEN)‚úÖ Code format√©$(NC)"

security: ## Analyse de s√©curit√©
	@echo "$(BLUE)üîí Analyse de s√©curit√©...$(NC)"
	safety check --file requirements.txt
	bandit -r . -f json -o security-report.json
	@echo "$(GREEN)‚úÖ Analyse de s√©curit√© termin√©e$(NC)"

# ===== DOCKER =====
build: ## Construit les images Docker
	@echo "$(BLUE)üèóÔ∏è  Construction des images Docker...$(NC)"
	$(DOCKER) build -t $(REGISTRY)/$(APP_NAME)-api:$(VERSION) .
	$(DOCKER) build -t $(REGISTRY)/$(APP_NAME)-ui:$(VERSION) -f ui/streamlit/Dockerfile .
	@echo "$(GREEN)‚úÖ Images construites$(NC)"

build-no-cache: ## Construit les images Docker sans cache
	@echo "$(BLUE)üèóÔ∏è  Construction des images Docker (sans cache)...$(NC)"
	$(DOCKER) build --no-cache -t $(REGISTRY)/$(APP_NAME)-api:$(VERSION) .
	$(DOCKER) build --no-cache -t $(REGISTRY)/$(APP_NAME)-ui:$(VERSION) -f ui/streamlit/Dockerfile .
	@echo "$(GREEN)‚úÖ Images construites$(NC)"

push: ## Pousse les images vers le registry
	@echo "$(BLUE)üì§ Envoi des images vers le registry...$(NC)"
	$(DOCKER) push $(REGISTRY)/$(APP_NAME)-api:$(VERSION)
	$(DOCKER) push $(REGISTRY)/$(APP_NAME)-ui:$(VERSION)
	@echo "$(GREEN)‚úÖ Images envoy√©es$(NC)"

# ===== D√âPLOIEMENT LOCAL =====
docker-up: up ## Alias pour up (compatibilit√©)

up: ## Lance la stack compl√®te en local
	@echo "$(BLUE)üöÄ Lancement de la stack MAR...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Stack lanc√©e$(NC)"
	@echo "$(YELLOW)üì± Interface: http://localhost:8501$(NC)"
	@echo "$(YELLOW)üîå API: http://localhost:8000$(NC)"
	@echo "$(YELLOW)üìä Grafana: http://localhost:3000$(NC)"
	@echo "$(YELLOW)üéØ Prometheus: http://localhost:9090$(NC)"

docker-down: down ## Alias pour down (compatibilit√©)

down: ## Arr√™te la stack locale
	@echo "$(YELLOW)‚èπÔ∏è  Arr√™t de la stack MAR...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Arr√™t des conteneurs...$(NC)"
	-$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Stack arr√™t√©e$(NC)"

restart: down up ## Red√©marre la stack locale

logs: ## Affiche les logs de la stack
	$(DOCKER_COMPOSE) logs -f

logs-api: ## Affiche les logs de l'API
	$(DOCKER_COMPOSE) logs -f mar-api

logs-ui: ## Affiche les logs de l'UI
	$(DOCKER_COMPOSE) logs -f mar-ui

# ===== D√âPLOIEMENT KUBERNETES =====
k8s-deploy: ## D√©ploie sur Kubernetes
	@echo "$(BLUE)‚ò∏Ô∏è  D√©ploiement sur Kubernetes...$(NC)"
	$(KUBECTL) apply -f k8s/manifests/
	@echo "$(GREEN)‚úÖ D√©ploiement K8s termin√©$(NC)"

k8s-delete: ## Supprime le d√©ploiement Kubernetes
	@echo "$(YELLOW)üóëÔ∏è  Suppression du d√©ploiement K8s...$(NC)"
	$(KUBECTL) delete -f k8s/manifests/
	@echo "$(GREEN)‚úÖ D√©ploiement supprim√©$(NC)"

k8s-status: ## Affiche le statut des pods
	@echo "$(BLUE)üìä Statut des pods:$(NC)"
	$(KUBECTL) get pods -n $(NAMESPACE)

k8s-logs: ## Affiche les logs des pods
	@echo "$(BLUE)üìã Logs des pods:$(NC)"
	$(KUBECTL) logs -f -l app=mar-api -n $(NAMESPACE)

# ===== DONN√âES ET INGESTION =====
ingest-sample: ## Ing√®re des donn√©es d'exemple
	@echo "$(BLUE)üìÅ Ingestion des donn√©es d'exemple...$(NC)"
	@if [ -f scripts/ingest_documents.py ]; then \
		$(PYTHON) scripts/ingest_documents.py --text "Exemple de document pour tester la plateforme MAR" --metadata '{"source": "sample", "type": "test"}'; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Script d'ingestion non trouv√©$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Donn√©es d'exemple ing√©r√©es$(NC)"

backup: ## Sauvegarde les donn√©es
	@echo "$(BLUE)üíæ Sauvegarde des donn√©es...$(NC)"
	mkdir -p backups/$(shell date +%Y%m%d_%H%M%S)
	# Sauvegarder le vector store et autres donn√©es
	@echo "$(GREEN)‚úÖ Sauvegarde termin√©e$(NC)"

# ===== NETTOYAGE =====
clean: ## Nettoie les fichiers temporaires
	@echo "$(BLUE)üßπ Nettoyage...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name ".pytest_cache" -delete
	find . -type f -name ".coverage" -delete
	rm -rf htmlcov/
	rm -rf dist/
	rm -rf build/
	rm -rf *.egg-info/
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-docker: ## Nettoie les images Docker
	@echo "$(BLUE)üê≥ Nettoyage Docker...$(NC)"
	$(DOCKER) system prune -f
	$(DOCKER) image prune -f
	@echo "$(GREEN)‚úÖ Nettoyage Docker termin√©$(NC)"

# ===== DOCUMENTATION =====
docs: ## G√©n√®re la documentation
	@echo "$(BLUE)üìö G√©n√©ration de la documentation...$(NC)"
	# Installer mkdocs si n√©cessaire
	$(PIP) install mkdocs mkdocs-material
	mkdocs build
	@echo "$(GREEN)‚úÖ Documentation g√©n√©r√©e$(NC)"

docs-serve: ## Lance le serveur de documentation
	@echo "$(BLUE)üìñ Lancement du serveur de documentation...$(NC)"
	mkdocs serve

# ===== MONITORING =====
monitor: ## Affiche les m√©triques de monitoring
	@echo "$(BLUE)üìä Ouverture des outils de monitoring...$(NC)"
	@echo "$(YELLOW)Grafana: http://localhost:3000 (admin/mar_admin_2024)$(NC)"
	@echo "$(YELLOW)Prometheus: http://localhost:9090$(NC)"
	@echo "$(YELLOW)Kibana: http://localhost:5601$(NC)"

health: ## V√©rifie la sant√© des services
	@echo "$(BLUE)üè• V√©rification de la sant√© des services...$(NC)"
	@curl -s http://localhost:8000/health | jq . || echo "‚ùå API non accessible"
	@curl -s http://localhost:9090/-/healthy > /dev/null && echo "‚úÖ Prometheus OK" || echo "‚ùå Prometheus KO"
	@curl -s http://localhost:3000/api/health | jq . || echo "‚ùå Grafana non accessible"

# ===== OUTILS =====
shell: ## Lance un shell dans le container de l'API
	$(DOCKER_COMPOSE) exec mar-api /bin/bash

requirements: ## Met √† jour requirements.txt
	@echo "$(BLUE)üìã Mise √† jour des requirements...$(NC)"
	$(PIP) freeze > requirements.txt
	@echo "$(GREEN)‚úÖ Requirements mis √† jour$(NC)"

version: ## Affiche la version
	@echo "$(BLUE)Version actuelle: $(VERSION)$(NC)"

# ===== RELEASE =====
release: ## Cr√©e une nouvelle release
	@echo "$(BLUE)üöÄ Cr√©ation d'une nouvelle release...$(NC)"
	@read -p "Nouvelle version (actuelle: $(VERSION)): " NEW_VERSION; \
	echo $$NEW_VERSION > VERSION; \
	git add VERSION; \
	git commit -m "Release v$$NEW_VERSION"; \
	git tag -a v$$NEW_VERSION -m "Release v$$NEW_VERSION"; \
	echo "$(GREEN)‚úÖ Release v$$NEW_VERSION cr√©√©e$(NC)"; \
	echo "$(YELLOW)N'oubliez pas de faire: git push && git push --tags$(NC)"

# D√©finir la cible par d√©faut
.DEFAULT_GOAL := help
