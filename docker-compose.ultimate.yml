# Docker Compose Ultimate - Configuration de déploiement finale
version: '3.8'

services:
  # Service principal MAR
  mar-api:
    build:
      context: .
      dockerfile: Dockerfile.ultimate
    container_name: mar-api-ultimate
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=staging
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://mar_user:mar_password@postgres:5432/mar_db
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - qdrant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mar-network

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: mar-postgres
    environment:
      POSTGRES_DB: mar_db
      POSTGRES_USER: mar_user
      POSTGRES_PASSWORD: mar_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - mar-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: mar-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - mar-network

  # Base de données vectorielle Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mar-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - mar-network

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: mar-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - mar-network

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:

networks:
  mar-network:
    driver: bridge
    name: mar-network
