input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  http {
    port => 8080
    codec => json
  }
}

filter {
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }

  # Add timestamp if missing
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }

  # Parse log level
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  }

  # Extract service information from container labels
  if [container][labels][service] {
    mutate {
      add_field => { "service" => "%{[container][labels][service]}" }
    }
  }

  # Parse RAG-specific metrics
  if [service] == "rag-api" {
    if [message] =~ /request_id/ {
      grok {
        match => { 
          "message" => "request_id=(?<request_id>[a-zA-Z0-9-]+)"
        }
      }
    }
    
    if [message] =~ /user_id/ {
      grok {
        match => { 
          "message" => "user_id=(?<user_id>[a-zA-Z0-9-]+)"
        }
      }
    }
    
    if [message] =~ /processing_time/ {
      grok {
        match => { 
          "message" => "processing_time=(?<processing_time>[0-9.]+)"
        }
      }
      mutate {
        convert => { "processing_time" => "float" }
      }
    }
  }

  # Parse Celery task logs
  if [service] =~ /celery/ {
    if [message] =~ /Task/ {
      grok {
        match => { 
          "message" => "Task (?<task_name>[a-zA-Z0-9._]+)\[(?<task_id>[a-zA-Z0-9-]+)\]"
        }
      }
    }
  }

  # Add environment and version info
  mutate {
    add_field => { 
      "environment" => "${ENVIRONMENT:development}"
      "version" => "${APP_VERSION:1.0.0}"
    }
  }

  # Remove unwanted fields
  mutate {
    remove_field => [ "agent", "ecs", "input" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "rag-logs-%{+YYYY.MM.dd}"
    template_name => "rag-logs"
    template => "/usr/share/logstash/templates/rag-logs-template.json"
    template_overwrite => true
  }

  # Debug output (comment out in production)
  stdout {
    codec => rubydebug
  }
}
