#!/bin/bash
# Script de validation pour Docker et d√©pendances

echo "üê≥ Script de validation Docker et d√©pendances"
echo "=============================================="

# Fonction pour tester Docker
test_docker() {
    echo "üîç Test de Docker..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©"
        return 1
    fi
    
    if ! docker info &> /dev/null; then
        echo "‚ö†Ô∏è  Docker daemon n'est pas en cours d'ex√©cution"
        echo "   Vous pouvez le d√©marrer avec: sudo systemctl start docker"
        echo "   Ou sur macOS: open -a Docker"
        return 1
    fi
    
    echo "‚úÖ Docker est disponible et fonctionne"
    return 0
}

# Fonction pour valider les d√©pendances
validate_dependencies() {
    echo "üîç Validation des d√©pendances..."
    
    local req_file="requirements.staging.txt"
    
    if [[ ! -f "$req_file" ]]; then
        echo "‚ùå Fichier $req_file non trouv√©"
        return 1
    fi
    
    echo "üìã Analyse de $req_file:"
    
    # Extraire les versions LangChain
    local langchain_version=$(grep -E "^langchain==" "$req_file" | head -1)
    local community_version=$(grep -E "^langchain-community==" "$req_file" | head -1)
    
    echo "  LangChain: $langchain_version"
    echo "  Community: $community_version"
    
    # V√©rifications sp√©cifiques
    if [[ "$langchain_version" == "langchain==0.3.25" ]] && [[ "$community_version" == "langchain-community==0.3.23" ]]; then
        echo "‚úÖ Versions LangChain compatibles"
    else
        echo "‚ùå Versions LangChain potentiellement incompatibles"
        return 1
    fi
    
    # V√©rifier les doublons
    echo "üîç Recherche de doublons..."
    local duplicates=$(sort "$req_file" | uniq -d | grep -v "^#" | grep -v "^$")
    
    if [[ -n "$duplicates" ]]; then
        echo "‚ùå Doublons d√©tect√©s:"
        echo "$duplicates"
        return 1
    else
        echo "‚úÖ Aucun doublon d√©tect√©"
    fi
    
    return 0
}

# Fonction pour g√©n√©rer un Dockerfile de test
generate_test_dockerfile() {
    echo "üîç G√©n√©ration d'un Dockerfile de test..."
    
    cat > Dockerfile.test << 'EOF'
# Dockerfile de test pour validation des d√©pendances
FROM python:3.11-slim

WORKDIR /app

# Copier uniquement le fichier requirements
COPY requirements.staging.txt .

# Tester l'installation des d√©pendances
RUN pip install --no-cache-dir --dry-run -r requirements.staging.txt

# Si on arrive ici, les d√©pendances sont OK
RUN echo "‚úÖ Test des d√©pendances r√©ussi"
EOF
    
    echo "‚úÖ Dockerfile.test cr√©√©"
}

# Fonction pour tester le build Docker (si possible)
test_docker_build() {
    if test_docker; then
        echo "üîç Test de build Docker..."
        
        if docker build -f Dockerfile.test -t langchain-deps-test . 2>&1; then
            echo "‚úÖ Build Docker r√©ussi"
            
            # Nettoyer
            docker rmi langchain-deps-test 2>/dev/null || true
            return 0
        else
            echo "‚ùå √âchec du build Docker"
            return 1
        fi
    else
        echo "‚ö†Ô∏è  Test Docker ignor√© (daemon non disponible)"
        return 0
    fi
}

# Fonction principale
main() {
    local exit_code=0
    
    # Test des d√©pendances
    if ! validate_dependencies; then
        exit_code=1
    fi
    
    # G√©n√©ration du Dockerfile de test
    generate_test_dockerfile
    
    # Test Docker si possible
    if ! test_docker_build; then
        exit_code=1
    fi
    
    echo ""
    echo "=============================================="
    if [[ $exit_code -eq 0 ]]; then
        echo "üéâ Tous les tests ont r√©ussi!"
        echo "   Les d√©pendances sont pr√™tes pour Docker"
    else
        echo "‚ùå Des probl√®mes ont √©t√© d√©tect√©s"
        echo "   Veuillez corriger les erreurs avant de continuer"
    fi
    
    # Nettoyer
    rm -f Dockerfile.test
    
    return $exit_code
}

# Ex√©cuter le script principal
main "$@"
