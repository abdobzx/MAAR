#!/bin/zsh

# Script de test intelligent pour r√©soudre "resolution-too-deep"
# macOS/zsh optimis√©

set -e  # Arr√™t en cas d'erreur

echo "üîß TEST INTELLIGENT - R√©solution 'resolution-too-deep'"
echo "======================================================="

# Couleurs pour la sortie
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour les messages color√©s
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# V√©rifier si Docker est disponible
check_docker() {
    log_info "V√©rification de Docker..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        return 1
    fi
    
    if ! docker info &> /dev/null; then
        log_warning "Docker daemon n'est pas en cours d'ex√©cution"
        log_info "Tentative de d√©marrage automatique..."
        
        # Essayer de d√©marrer Docker sur macOS
        if [[ "$OSTYPE" == "darwin"* ]]; then
            open -a Docker 2>/dev/null || {
                log_error "Impossible de d√©marrer Docker automatiquement"
                log_info "D√©marrez Docker Desktop manuellement et relancez ce script"
                return 1
            }
            
            # Attendre que Docker d√©marre
            log_info "Attente du d√©marrage de Docker..."
            local count=0
            while ! docker info &> /dev/null && [ $count -lt 30 ]; do
                sleep 2
                ((count++))
                echo -n "."
            done
            echo ""
            
            if ! docker info &> /dev/null; then
                log_error "Docker n'a pas d√©marr√© dans les temps"
                return 1
            fi
        else
            log_error "D√©marrez Docker et relancez ce script"
            return 1
        fi
    fi
    
    log_success "Docker est disponible"
    docker --version
    return 0
}

# Test du requirements minimal
test_minimal_requirements() {
    log_info "Test du requirements minimal..."
    
    local test_file="requirements.test-minimal.txt"
    if [[ ! -f "$test_file" ]]; then
        log_error "Fichier $test_file non trouv√©"
        return 1
    fi
    
    # Cr√©er un Dockerfile de test minimal
    cat > Dockerfile.test-minimal << 'EOF'
FROM python:3.11-slim
WORKDIR /app
COPY requirements.test-minimal.txt .
RUN pip install --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.test-minimal.txt
RUN python -c "import langchain; import crewai; print('Test minimal r√©ussi')"
EOF
    
    if docker build -f Dockerfile.test-minimal -t test-minimal-deps . &> test-minimal.log; then
        log_success "Requirements minimal: BUILD R√âUSSI"
        docker rmi test-minimal-deps &> /dev/null || true
        rm -f Dockerfile.test-minimal
        return 0
    else
        log_error "Requirements minimal: BUILD √âCHOU√â"
        log_info "Derni√®res lignes du log:"
        tail -10 test-minimal.log
        return 1
    fi
}

# Test du Dockerfile final optimis√©
test_final_dockerfile() {
    log_info "Test du Dockerfile.final optimis√©..."
    
    if [[ ! -f "Dockerfile.final" ]]; then
        log_error "Dockerfile.final non trouv√©"
        return 1
    fi
    
    if docker build -f Dockerfile.final -t test-final-solution . &> test-final.log; then
        log_success "Dockerfile.final: BUILD R√âUSSI"
        
        # Test de fonctionnement basique
        log_info "Test de fonctionnement du container..."
        if docker run --rm -d --name test-container -p 8001:8000 test-final-solution &> /dev/null; then
            sleep 5
            if curl -f http://localhost:8001/health &> /dev/null || curl -f http://localhost:8001/ &> /dev/null; then
                log_success "Container fonctionne correctement"
            else
                log_warning "Container d√©marr√© mais endpoint non disponible (normal si pas d'app compl√®te)"
            fi
            docker stop test-container &> /dev/null || true
        fi
        
        docker rmi test-final-solution &> /dev/null || true
        return 0
    else
        log_error "Dockerfile.final: BUILD √âCHOU√â"
        log_info "Derni√®res lignes du log:"
        tail -20 test-final.log
        return 1
    fi
}

# Test de compatibilit√© des versions
test_version_compatibility() {
    log_info "Test de compatibilit√© des versions LangChain..."
    
    python3 -c "
import subprocess
import sys
import json

def get_package_info(package, version):
    try:
        import urllib.request
        url = f'https://pypi.org/pypi/{package}/{version}/json'
        with urllib.request.urlopen(url) as response:
            data = json.loads(response.read())
        return data.get('info', {}).get('requires_dist', [])
    except:
        return None

# V√©rifier compatibilit√© langchain et langchain-community
langchain_deps = get_package_info('langchain', '0.3.25')
community_deps = get_package_info('langchain-community', '0.3.23')

if langchain_deps and community_deps:
    community_langchain_req = [dep for dep in community_deps if 'langchain<' in dep and '>=' in dep]
    if community_langchain_req:
        print(f'‚úÖ langchain-community 0.3.23 requiert: {community_langchain_req[0]}')
        print('‚úÖ langchain 0.3.25 satisfait cette exigence')
    else:
        print('‚ö†Ô∏è  Impossible de v√©rifier les exigences')
else:
    print('‚ö†Ô∏è  Impossible de r√©cup√©rer les informations de d√©pendances')
"
}

# Fonction de diagnostic avanc√©
advanced_diagnosis() {
    log_info "Diagnostic avanc√© du probl√®me..."
    
    # V√©rifier la structure des requirements
    local req_file="requirements.staging.txt"
    if [[ -f "$req_file" ]]; then
        local total_packages=$(grep -v '^#' "$req_file" | grep -v '^$' | wc -l | xargs)
        local exact_versions=$(grep -E '==[0-9]' "$req_file" | wc -l | xargs)
        local range_versions=$(grep -E '>=' "$req_file" | wc -l | xargs)
        
        log_info "Analyse de $req_file:"
        echo "  üì¶ Total packages: $total_packages"
        echo "  üîí Versions exactes (==): $exact_versions"
        echo "  üîì Versions flexibles (>=): $range_versions"
        
        if [[ $exact_versions -gt $((total_packages / 2)) ]]; then
            log_warning "Trop de versions exactes! Cela peut causer 'resolution-too-deep'"
            log_info "Recommandation: Utilisez plus de bornes inf√©rieures (>=)"
        else
            log_success "Bon √©quilibre entre versions exactes et flexibles"
        fi
    fi
}

# Fonction principale
main() {
    local success_count=0
    local total_tests=0
    
    # Test 1: Docker disponible
    ((total_tests++))
    if check_docker; then
        ((success_count++))
    else
        log_error "Docker non disponible - tests Docker ignor√©s"
        return 1
    fi
    
    # Test 2: Compatibilit√© des versions
    ((total_tests++))
    test_version_compatibility && ((success_count++))
    
    # Test 3: Diagnostic avanc√©
    advanced_diagnosis
    
    # Test 4: Requirements minimal
    ((total_tests++))
    if test_minimal_requirements; then
        ((success_count++))
    fi
    
    # Test 5: Dockerfile final
    ((total_tests++))
    if test_final_dockerfile; then
        ((success_count++))
        
        log_success "üéâ SOLUTION TROUV√âE!"
        log_info "Le Dockerfile.final r√©sout le probl√®me 'resolution-too-deep'"
        log_info "Vous pouvez maintenant utiliser: docker build -f Dockerfile.final -t votre-app ."
    fi
    
    # R√©sum√© final
    echo ""
    echo "======================================================="
    log_info "R√âSUM√â DES TESTS: $success_count/$total_tests r√©ussis"
    
    if [[ $success_count -eq $total_tests ]]; then
        log_success "üöÄ PROBL√àME R√âSOLU COMPL√àTEMENT!"
        echo ""
        echo "üìã PROCHAINES √âTAPES:"
        echo "1. Utilisez Dockerfile.final pour vos builds"
        echo "2. Le probl√®me 'resolution-too-deep' est √©limin√©"
        echo "3. Votre application est pr√™te pour la production"
    elif [[ $success_count -gt 0 ]]; then
        log_warning "‚ö° SOLUTION PARTIELLE TROUV√âE"
        echo ""
        echo "üìã ACTIONS RECOMMAND√âES:"
        echo "1. Utilisez les √©l√©ments qui fonctionnent"
        echo "2. Ajustez les packages probl√©matiques"
        echo "3. Testez en production avec la solution partielle"
    else
        log_error "‚ùå PROBL√àME PERSISTANT"
        echo ""
        echo "üìã √âTAPES DE D√âPANNAGE:"
        echo "1. V√©rifiez les logs: test-*.log"
        echo "2. Simplifiez encore plus les requirements"
        echo "3. Contactez le support technique si n√©cessaire"
    fi
    
    # Nettoyage
    rm -f test-*.log Dockerfile.test-* 2>/dev/null || true
    
    return $([[ $success_count -gt 0 ]] && echo 0 || echo 1)
}

# Ex√©cution du script principal
main "$@"
