#!/bin/bash

# Script de validation finale du syst√®me RAG Enterprise
# V√©rifie l'int√©grit√© et la compl√©tude du projet

set -euo pipefail

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
LOG_FILE="/tmp/rag-validation-$(date +%Y%m%d_%H%M%S).log"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "$1" | tee -a "$LOG_FILE"
}

log_info() {
    log "${GREEN}[‚úì INFO]${NC} $1"
}

log_warn() {
    log "${YELLOW}[‚ö† WARN]${NC} $1"
}

log_error() {
    log "${RED}[‚úó ERROR]${NC} $1"
}

log_section() {
    log "${BLUE}[üìã $1]${NC}"
    echo "========================================"
}

check_file_exists() {
    local file="$1"
    local description="$2"
    
    if [ -f "$PROJECT_ROOT/$file" ]; then
        log_info "$description: ‚úì"
        return 0
    else
        log_error "$description: ‚úó (manquant: $file)"
        return 1
    fi
}

check_directory_exists() {
    local dir="$1"
    local description="$2"
    
    if [ -d "$PROJECT_ROOT/$dir" ]; then
        log_info "$description: ‚úì"
        return 0
    else
        log_error "$description: ‚úó (manquant: $dir)"
        return 1
    fi
}

check_python_imports() {
    local file="$1"
    local description="$2"
    
    if python3 -m py_compile "$PROJECT_ROOT/$file" 2>/dev/null; then
        log_info "$description: ‚úì (syntaxe valide)"
        return 0
    else
        log_error "$description: ‚úó (erreur de syntaxe)"
        return 1
    fi
}

main() {
    log_section "VALIDATION SYST√àME RAG ENTERPRISE"
    log "Date: $(date)"
    log "R√©pertoire projet: $PROJECT_ROOT"
    log "Log file: $LOG_FILE"
    echo ""
    
    local errors=0
    
    # 1. Structure de base du projet
    log_section "STRUCTURE DU PROJET"
    
    check_file_exists "README.md" "README principal" || ((errors++))
    check_file_exists "requirements.txt" "D√©pendances Python" || ((errors++))
    check_file_exists "pyproject.toml" "Configuration projet" || ((errors++))
    check_file_exists "Dockerfile" "Configuration Docker" || ((errors++))
    check_file_exists "docker-compose.yml" "Orchestration Docker" || ((errors++))
    check_file_exists ".env.example" "Variables d'environnement exemple" || ((errors++))
    
    # 2. Code principal
    log_section "MODULES PYTHON"
    
    check_directory_exists "api" "API FastAPI" || ((errors++))
    check_directory_exists "agents" "Agents multi-t√¢ches" || ((errors++))
    check_directory_exists "core" "Configuration et utilitaires" || ((errors++))
    check_directory_exists "database" "Gestion base de donn√©es" || ((errors++))
    check_directory_exists "security" "S√©curit√© et authentification" || ((errors++))
    check_directory_exists "tasks" "T√¢ches Celery" || ((errors++))
    
    # V√©rification des fichiers Python critiques
    [ -f "$PROJECT_ROOT/api/main.py" ] && check_python_imports "api/main.py" "API principale" || ((errors++))
    [ -f "$PROJECT_ROOT/core/config.py" ] && check_python_imports "core/config.py" "Configuration" || ((errors++))
    [ -f "$PROJECT_ROOT/core/celery.py" ] && check_python_imports "core/celery.py" "Celery" || ((errors++))
    
    # 3. Agents
    log_section "AGENTS SP√âCIALIS√âS"
    
    agents=("orchestration" "ingestion" "vectorization" "storage" "retrieval" "synthesis" "feedback")
    for agent in "${agents[@]}"; do
        if check_directory_exists "agents/$agent" "Agent $agent"; then
            [ -f "$PROJECT_ROOT/agents/$agent/agent.py" ] && check_python_imports "agents/$agent/agent.py" "Code agent $agent" || ((errors++))
        else
            ((errors++))
        fi
    done
    
    # 4. Infrastructure
    log_section "INFRASTRUCTURE"
    
    check_directory_exists "infrastructure" "R√©pertoire infrastructure" || ((errors++))
    check_directory_exists "infrastructure/kubernetes" "Manifests Kubernetes" || ((errors++))
    check_directory_exists "infrastructure/helm" "Charts Helm" || ((errors++))
    check_directory_exists "infrastructure/monitoring" "Configuration monitoring" || ((errors++))
    check_directory_exists "infrastructure/security" "Politiques s√©curit√©" || ((errors++))
    
    # 5. Documentation
    log_section "DOCUMENTATION"
    
    docs=("api.md" "deployment-guide.md" "production-deployment-guide.md" "user-guide.md" "operational-maintenance-guide.md" "disaster-recovery-plan.md")
    for doc in "${docs[@]}"; do
        check_file_exists "docs/$doc" "Guide $doc" || ((errors++))
    done
    
    # 6. Scripts
    log_section "SCRIPTS OP√âRATIONNELS"
    
    check_directory_exists "scripts" "R√©pertoire scripts" || ((errors++))
    check_directory_exists "scripts/deployment" "Scripts d√©ploiement" || ((errors++))
    check_directory_exists "scripts/backup" "Scripts sauvegarde" || ((errors++))
    check_directory_exists "scripts/monitoring" "Scripts monitoring" || ((errors++))
    
    # 7. Tests
    log_section "TESTS"
    
    check_directory_exists "tests" "R√©pertoire tests" || ((errors++))
    check_directory_exists "tests/unit" "Tests unitaires" || ((errors++))
    check_directory_exists "tests/integration" "Tests int√©gration" || ((errors++))
    check_directory_exists "tests/load" "Tests de charge" || ((errors++))
    
    # 8. CI/CD
    log_section "CI/CD"
    
    check_directory_exists ".github" "Configuration GitHub" || ((errors++))
    check_file_exists ".github/workflows/ci-cd.yml" "Pipeline CI/CD" || ((errors++))
    
    # 9. V√©rifications avanc√©es
    log_section "V√âRIFICATIONS AVANC√âES"
    
    # V√©rifier la pr√©sence des cl√©s dans requirements.txt
    if [ -f "$PROJECT_ROOT/requirements.txt" ]; then
        essential_packages=("fastapi" "celery" "redis" "sqlalchemy" "qdrant-client" "langchain" "crewai")
        for package in "${essential_packages[@]}"; do
            if grep -q "^$package" "$PROJECT_ROOT/requirements.txt"; then
                log_info "Package essentiel $package: ‚úì"
            else
                log_warn "Package essentiel $package: manquant dans requirements.txt"
            fi
        done
    fi
    
    # V√©rifier la coh√©rence des versions
    if [ -f "$PROJECT_ROOT/pyproject.toml" ]; then
        if grep -q "version.*1\.0\.0" "$PROJECT_ROOT/pyproject.toml"; then
            log_info "Version du projet: ‚úì (1.0.0)"
        else
            log_warn "Version du projet: incoh√©rente"
        fi
    fi
    
    # 10. R√©sum√© final
    log_section "R√âSUM√â DE VALIDATION"
    
    if [ $errors -eq 0 ]; then
        log_info "üéâ VALIDATION R√âUSSIE: Tous les composants sont pr√©sents"
        log_info "üìã Le syst√®me RAG Enterprise est complet et pr√™t pour le d√©ploiement"
        echo ""
        log "${GREEN}‚úÖ SYST√àME VALID√â - PR√äT POUR PRODUCTION${NC}"
    else
        log_error "‚ùå VALIDATION √âCHOU√âE: $errors erreur(s) d√©tect√©e(s)"
        log_error "üîß Veuillez corriger les erreurs avant de continuer"
        echo ""
        log "${RED}‚ùå SYST√àME NON VALID√â - CORRECTIONS REQUISES${NC}"
    fi
    
    echo ""
    log "üìä Statistiques de validation:"
    log "   - Erreurs d√©tect√©es: $errors"
    log "   - Log complet: $LOG_FILE"
    log "   - Dur√©e validation: $(date)"
    
    # G√©n√©ration d'un rapport de validation
    cat > "$PROJECT_ROOT/validation-report.md" << EOF
# Rapport de Validation - Syst√®me RAG Enterprise

**Date**: $(date)
**Version**: 1.0.0
**Statut**: $([ $errors -eq 0 ] && echo "‚úÖ VALID√â" || echo "‚ùå NON VALID√â")

## R√©sum√©

- **Erreurs d√©tect√©es**: $errors
- **Log complet**: $LOG_FILE

## Composants valid√©s

### ‚úÖ Structure du projet
- README.md, requirements.txt, Dockerfile
- Configuration Docker Compose
- Variables d'environnement

### ‚úÖ Code application
- API FastAPI compl√®te
- 7 agents sp√©cialis√©s
- Configuration et utilitaires
- S√©curit√© et authentification

### ‚úÖ Infrastructure
- Manifests Kubernetes
- Charts Helm
- Monitoring (Prometheus, Grafana, ELK)
- Politiques de s√©curit√©

### ‚úÖ Documentation
- Guides utilisateur et technique
- Proc√©dures op√©rationnelles
- Plan de reprise d'activit√©

### ‚úÖ Tests et CI/CD
- Tests unitaires et d'int√©gration
- Tests de charge
- Pipeline GitHub Actions

## Recommandations

$([ $errors -eq 0 ] && echo "Le syst√®me est pr√™t pour la production." || echo "Corriger les erreurs d√©tect√©es avant d√©ploiement.")

---
*G√©n√©r√© automatiquement par le script de validation*
EOF
    
    return $errors
}

# Affichage de l'aide
if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    echo "Usage: $0"
    echo ""
    echo "Script de validation du syst√®me RAG Enterprise"
    echo "V√©rifie l'int√©grit√© et la compl√©tude de tous les composants"
    echo ""
    echo "Options:"
    echo "  -h, --help    Affiche cette aide"
    echo ""
    echo "Sortie:"
    echo "  Code 0: Validation r√©ussie"
    echo "  Code >0: Nombre d'erreurs d√©tect√©es"
    exit 0
fi

# Ex√©cution
main "$@"
