# Dockerfile Ultimate - Résolution définitive des conflits
FROM python:3.11-slim

# Métadonnées
LABEL maintainer="MAR Team"
LABEL version="1.0"
LABEL description="Multi-Agent RAG System - Ultimate Build"

# Variables d'environnement pour pip
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Installation des dépendances système
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    pkg-config \
    libffi-dev \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Mise à jour de pip
RUN pip install --upgrade pip setuptools wheel

# Création du répertoire de travail
WORKDIR /app

# ÉTAPE 1: Installation des dépendances de base
RUN pip install --no-deps \
    typing-extensions==4.8.0 \
    packaging==23.2 \
    certifi==2023.11.17

# ÉTAPE 2: Installation du framework HTTP (sans conflits)
RUN pip install \
    httpx==0.25.2 \
    httpcore==1.0.2 \
    h11==0.14.0 \
    sniffio==1.3.0

# ÉTAPE 3: Installation de FastAPI et dépendances web
RUN pip install \
    pydantic==2.5.3 \
    fastapi==0.108.0 \
    uvicorn[standard]==0.25.0

# ÉTAPE 4: Installation d'Ollama (version compatible)
RUN pip install ollama==0.2.1

# ÉTAPE 5: Installation des dépendances par groupes
COPY requirements.final.txt .

# Installation par lots pour éviter les conflits
RUN pip install \
    pydantic-settings==2.1.0 \
    python-dotenv==1.0.0 \
    aiofiles==23.2.1

RUN pip install \
    sqlalchemy==2.0.25 \
    asyncpg==0.29.0 \
    redis==5.0.1

RUN pip install \
    crewai==0.11.2 \
    langchain==0.2.16 \
    langchain-community==0.2.16

# Installation du reste des dépendances
RUN pip install --no-deps -r requirements.final.txt || pip install -r requirements.final.txt

# ÉTAPE 6: Vérification finale des installations
RUN python -c "import httpx; import ollama; import fastapi; print('✅ Toutes les dépendances critiques sont installées')"

# Copie du code source
COPY . .

# Création des répertoires nécessaires
RUN mkdir -p logs data

# Exposition du port
EXPOSE 8000

# Point d'entrée avec healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Point d'entrée
CMD ["uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
