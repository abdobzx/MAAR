#!/usr/bin/env python3
"""
Script de validation de production pour le syst√®me MAR avec SothemaAI
V√©rifie que tous les composants fonctionnent correctement avant le d√©ploiement
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# Ajouter le r√©pertoire racine au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

# Configuration des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def validate_config():
    """Valide la configuration du syst√®me"""
    logger.info("üîß Validation de la configuration...")
    
    try:
        from core.config import settings
        
        # V√©rifier les settings essentiels
        essential_settings = [
            'database',
            'redis', 
            'vector_db',
            'llm',
            'security'
        ]
        
        for setting in essential_settings:
            if hasattr(settings, setting):
                logger.info(f"‚úÖ Configuration {setting} charg√©e")
            else:
                logger.error(f"‚ùå Configuration {setting} manquante")
                return False
        
        # V√©rifier les fournisseurs LLM autoris√©s
        allowed_providers = ["sothemaai", "cohere", "ollama"]
        if settings.llm.default_provider in allowed_providers:
            logger.info(f"‚úÖ Fournisseur par d√©faut valide: {settings.llm.default_provider}")
        else:
            logger.error(f"‚ùå Fournisseur par d√©faut invalide: {settings.llm.default_provider}")
            return False
            
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la validation de la configuration: {e}")
        return False

async def validate_providers():
    """Valide les fournisseurs d'IA"""
    logger.info("üß† Validation des fournisseurs d'IA...")
    
    try:
        from core.providers import initialize_providers, provider_manager
        
        # Initialiser les fournisseurs
        await initialize_providers()
        
        # V√©rifier que des fournisseurs sont disponibles
        if not provider_manager.providers:
            logger.error("‚ùå Aucun fournisseur d'IA disponible")
            return False
        
        logger.info(f"‚úÖ Fournisseurs disponibles: {list(provider_manager.providers.keys())}")
        
        # V√©rifier SothemaAI en priorit√©
        if "sothemaai" in provider_manager.providers:
            logger.info("‚úÖ SothemaAI disponible comme fournisseur principal")
        else:
            logger.warning("‚ö†Ô∏è SothemaAI non disponible - utilisation des fournisseurs de fallback")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la validation des fournisseurs: {e}")
        return False

async def validate_models():
    """Valide les mod√®les de donn√©es"""
    logger.info("üìã Validation des mod√®les de donn√©es...")
    
    try:
        from core.models import (
            DocumentMetadata, 
            EmbeddingModel, 
            ChatMessage,
            SynthesisRequest,
            VectorizationRequest
        )
        
        # Test de cr√©ation d'instances de mod√®les
        test_models = [
            DocumentMetadata,
            EmbeddingModel,
            ChatMessage,
            SynthesisRequest,
            VectorizationRequest
        ]
        
        for model in test_models:
            logger.info(f"‚úÖ Mod√®le {model.__name__} valide")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la validation des mod√®les: {e}")
        return False

async def validate_agents():
    """Valide les agents principaux"""
    logger.info("ü§ñ Validation des agents...")
    
    agents_to_test = [
        ("synthesis", "SynthesisAgent"),
        ("vectorization", "VectorizationAgent"),
        ("orchestration", "OrchestrationAgent")
    ]
    
    for agent_module, agent_class in agents_to_test:
        try:
            module = __import__(f"agents.{agent_module}.agent", fromlist=[agent_class])
            agent_cls = getattr(module, agent_class)
            
            # V√©rifier que la classe existe et peut √™tre import√©e
            logger.info(f"‚úÖ Agent {agent_class} import√© avec succ√®s")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'importation de {agent_class}: {e}")
            return False
    
    return True

async def validate_api():
    """Valide l'API principale"""
    logger.info("üåê Validation de l'API...")
    
    try:
        from api.main import app
        
        # V√©rifier que l'app FastAPI est cr√©√©e
        if app:
            logger.info("‚úÖ Application FastAPI cr√©√©e avec succ√®s")
        else:
            logger.error("‚ùå Impossible de cr√©er l'application FastAPI")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la validation de l'API: {e}")
        return False

async def validate_sothemaai_integration():
    """Valide sp√©cifiquement l'int√©gration SothemaAI"""
    logger.info("üîó Validation de l'int√©gration SothemaAI...")
    
    try:
        from core.providers.sothemaai_provider import SothemaAIProvider
        from core.providers.sothemaai_client import SothemaAIClient
        
        # Test d'importation des classes SothemaAI
        logger.info("‚úÖ Classes SothemaAI import√©es avec succ√®s")
        
        # V√©rifier la configuration SothemaAI
        sothemaai_config = {
            'base_url': os.getenv('SOTHEMAAI_BASE_URL'),
            'api_key': os.getenv('SOTHEMAAI_API_KEY'),
            'use_only': os.getenv('USE_SOTHEMAAI_ONLY', 'false').lower() == 'true'
        }
        
        if sothemaai_config['base_url']:
            logger.info(f"‚úÖ SothemaAI Base URL configur√©e: {sothemaai_config['base_url']}")
        else:
            logger.warning("‚ö†Ô∏è SothemaAI Base URL non configur√©e")
        
        if sothemaai_config['api_key']:
            logger.info("‚úÖ SothemaAI API Key configur√©e")
        else:
            logger.warning("‚ö†Ô∏è SothemaAI API Key non configur√©e")
        
        if sothemaai_config['use_only']:
            logger.info("‚úÖ Mode SothemaAI uniquement activ√©")
        else:
            logger.info("‚ÑπÔ∏è Mode SothemaAI avec fallback activ√©")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la validation de SothemaAI: {e}")
        return False

async def main():
    """Fonction principale de validation"""
    logger.info("üöÄ D√©but de la validation de production MAR avec SothemaAI")
    
    # Tests de validation
    validation_tests = [
        ("Configuration", validate_config),
        ("Fournisseurs d'IA", validate_providers),
        ("Mod√®les de donn√©es", validate_models),
        ("Agents", validate_agents),
        ("API", validate_api),
        ("Int√©gration SothemaAI", validate_sothemaai_integration)
    ]
    
    results = {}
    
    for test_name, test_func in validation_tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"Test: {test_name}")
        logger.info('='*50)
        
        try:
            result = await test_func()
            results[test_name] = result
            
            if result:
                logger.info(f"‚úÖ {test_name}: R√âUSSI")
            else:
                logger.error(f"‚ùå {test_name}: √âCHOU√â")
                
        except Exception as e:
            logger.error(f"‚ùå {test_name}: ERREUR - {e}")
            results[test_name] = False
    
    # R√©sum√© des r√©sultats
    logger.info("\n" + "="*60)
    logger.info("R√âSUM√â DE LA VALIDATION")
    logger.info("="*60)
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
        logger.info(f"{test_name}: {status}")
    
    logger.info(f"\nR√©sultat global: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        logger.info("üéâ TOUS LES TESTS SONT R√âUSSIS - PR√äT POUR LA PRODUCTION")
        return True
    else:
        logger.error("‚ö†Ô∏è CERTAINS TESTS ONT √âCHOU√â - CORRECTION REQUISE AVANT PRODUCTION")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
