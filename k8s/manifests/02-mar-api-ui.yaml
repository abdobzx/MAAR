# Déploiement API MAR principal
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mar-api-deployment
  namespace: mar-platform
  labels:
    app: mar-api
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mar-api
  template:
    metadata:
      labels:
        app: mar-api
    spec:
      containers:
      - name: mar-api
        image: mar-platform/api:latest
        ports:
        - containerPort: 8000
        env:
        - name: VECTOR_STORE_PATH
          value: "/app/data/vector_store"
        - name: OLLAMA_HOST
          valueFrom:
            configMapKeyRef:
              name: mar-config
              key: OLLAMA_HOST
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: mar-config
              key: REDIS_HOST
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: mar-secrets
              key: JWT_SECRET
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mar-config
              key: LOG_LEVEL
        volumeMounts:
        - name: vector-store-data
          mountPath: /app/data
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 30
      volumes:
      - name: vector-store-data
        persistentVolumeClaim:
          claimName: vector-store-pvc
      - name: logs-volume
        emptyDir: {}
      # Configuration pour affinité de pods
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mar-api
              topologyKey: kubernetes.io/hostname
---
# Service API MAR
apiVersion: v1
kind: Service
metadata:
  name: mar-api-service
  namespace: mar-platform
  labels:
    app: mar-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: mar-api
---
# HorizontalPodAutoscaler pour l'API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mar-api-hpa
  namespace: mar-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mar-api-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
---
# Déploiement UI Streamlit
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mar-ui-deployment
  namespace: mar-platform
  labels:
    app: mar-ui
    component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mar-ui
  template:
    metadata:
      labels:
        app: mar-ui
    spec:
      containers:
      - name: mar-ui
        image: mar-platform/ui:latest
        ports:
        - containerPort: 8501
        env:
        - name: MAR_API_URL
          value: "http://mar-api-service"
        - name: STREAMLIT_SERVER_PORT
          value: "8501"
        - name: STREAMLIT_SERVER_ADDRESS
          value: "0.0.0.0"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 10
          periodSeconds: 5
---
# Service UI Streamlit
apiVersion: v1
kind: Service
metadata:
  name: mar-ui-service
  namespace: mar-platform
  labels:
    app: mar-ui
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8501
    protocol: TCP
  selector:
    app: mar-ui
