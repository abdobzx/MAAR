# Déploiement Redis pour cache et rate limiting
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: mar-platform
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        args:
          - redis-server
          - --appendonly
          - "yes"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-data
        emptyDir: {}
---
# Service Redis
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: mar-platform
  labels:
    app: redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: redis
---
# Déploiement Ollama LLM
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-deployment
  namespace: mar-platform
  labels:
    app: ollama
    component: llm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ollama
  template:
    metadata:
      labels:
        app: ollama
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
        env:
        - name: OLLAMA_ORIGINS
          value: "*"
        - name: OLLAMA_HOST
          value: "0.0.0.0"
        volumeMounts:
        - name: ollama-models
          mountPath: /root/.ollama
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/tags
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: ollama-models
        persistentVolumeClaim:
          claimName: ollama-models-pvc
      # Configuration pour GPU (décommenter si disponible)
      # nodeSelector:
      #   accelerator: nvidia-tesla-k80
      # tolerations:
      # - key: nvidia.com/gpu
      #   operator: Exists
      #   effect: NoSchedule
---
# Service Ollama
apiVersion: v1
kind: Service
metadata:
  name: ollama-service
  namespace: mar-platform
  labels:
    app: ollama
spec:
  type: ClusterIP
  ports:
  - port: 11434
    targetPort: 11434
    protocol: TCP
  selector:
    app: ollama
---
# Job d'initialisation pour télécharger les modèles
apiVersion: batch/v1
kind: Job
metadata:
  name: ollama-model-init
  namespace: mar-platform
spec:
  template:
    spec:
      containers:
      - name: model-downloader
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Attente du service Ollama..."
          until curl -f http://ollama-service:11434/api/tags; do
            sleep 10
          done
          
          echo "Téléchargement des modèles..."
          curl -X POST http://ollama-service:11434/api/pull -d '{"name": "llama3"}'
          curl -X POST http://ollama-service:11434/api/pull -d '{"name": "mistral"}'
          
          echo "Modèles téléchargés avec succès!"
      restartPolicy: OnFailure
  backoffLimit: 3
