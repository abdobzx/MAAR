# Pipeline CI/CD pour la plateforme MAR
name: MAR Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/mar-api
  IMAGE_NAME_UI: ${{ github.repository }}/mar-ui

jobs:
  # ===== TESTS ET QUALIT√â =====
  test-and-lint:
    name: Tests et Qualit√© du Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Linting (Flake8)
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Type checking (MyPy)
      run: mypy . --ignore-missing-imports
      continue-on-error: true  # MyPy peut √™tre strict
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Archive coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # ===== TESTS DE S√âCURIT√â =====
  security-scan:
    name: Analyse de S√©curit√©
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install safety bandit semgrep
    
    - name: Check dependencies for vulnerabilities (Safety)
      run: safety check --file requirements.txt
    
    - name: Security linting (Bandit)
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Static analysis (Semgrep)
      run: |
        python -m semgrep --config=auto --json --output=semgrep-report.json .
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          semgrep-report.json

  # ===== BUILD DOCKER IMAGES =====
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-and-lint, security-scan]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for UI
      id: meta-ui
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_UI }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push UI image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./ui/streamlit/Dockerfile
        push: true
        tags: ${{ steps.meta-ui.outputs.tags }}
        labels: ${{ steps.meta-ui.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== TESTS D'INT√âGRATION =====
  integration-tests:
    name: Tests d'Int√©gration
    runs-on: ubuntu-latest
    needs: [build-images]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Compose
      run: |
        # Configuration pour les tests d'int√©gration
        cp docker-compose.yml docker-compose.test.yml
        # Modifier pour utiliser les images construites
        sed -i 's|build: .|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}|g' docker-compose.test.yml
    
    - name: Run integration tests
      run: |
        # Lancer les services n√©cessaires
        docker-compose -f docker-compose.test.yml up -d mar-api redis
        
        # Attendre que les services soient pr√™ts
        sleep 30
        
        # Ex√©cuter les tests d'int√©gration
        docker-compose -f docker-compose.test.yml exec -T mar-api pytest tests/integration/ -v
    
    - name: Cleanup
      run: docker-compose -f docker-compose.test.yml down
      if: always()

  # ===== D√âPLOIEMENT EN STAGING =====
  deploy-staging:
    name: D√©ploiement Staging
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      run: |
        # Mettre √† jour les images dans les manifests
        sed -i 's|mar-platform/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}|g' k8s/manifests/*.yaml
        sed -i 's|mar-platform/ui:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_UI }}:${{ github.sha }}|g' k8s/manifests/*.yaml
        
        # Appliquer les manifests
        kubectl apply -f k8s/manifests/ --namespace=mar-staging
        
        # Attendre le d√©ploiement
        kubectl rollout status deployment/mar-api-deployment --namespace=mar-staging
        kubectl rollout status deployment/mar-ui-deployment --namespace=mar-staging
    
    - name: Run smoke tests
      run: |
        # Tests de smoke sur staging
        kubectl wait --for=condition=available --timeout=300s deployment/mar-api-deployment --namespace=mar-staging
        
        # Test de sant√© de l'API
        API_URL=$(kubectl get service mar-api-service --namespace=mar-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        curl -f http://$API_URL/health || exit 1

  # ===== D√âPLOIEMENT EN PRODUCTION =====
  deploy-production:
    name: D√©ploiement Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to production
      run: |
        # Utiliser le tag de release
        RELEASE_TAG=${GITHUB_REF#refs/tags/}
        
        # Mettre √† jour les images
        sed -i "s|mar-platform/api:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${RELEASE_TAG}|g" k8s/manifests/*.yaml
        sed -i "s|mar-platform/ui:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_UI }}:${RELEASE_TAG}|g" k8s/manifests/*.yaml
        
        # D√©ploiement en production avec validation
        kubectl apply -f k8s/manifests/ --namespace=mar-production
        
        # Surveillance du d√©ploiement
        kubectl rollout status deployment/mar-api-deployment --namespace=mar-production --timeout=600s
        kubectl rollout status deployment/mar-ui-deployment --namespace=mar-production --timeout=600s
    
    - name: Post-deployment tests
      run: |
        # Tests de sant√© post-d√©ploiement
        sleep 60  # Attendre la stabilisation
        
        API_URL=$(kubectl get service mar-api-service --namespace=mar-production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Tests de base
        curl -f http://$API_URL/health
        curl -f http://$API_URL/ready
        
        echo "‚úÖ D√©ploiement en production r√©ussi!"

  # ===== NOTIFICATION =====
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ success() }}
      run: |
        echo "üéâ Pipeline MAR Platform termin√© avec succ√®s!"
        # Ici vous pouvez ajouter des notifications Slack, Teams, etc.
    
    - name: Notify failure
      if: ${{ failure() }}
      run: |
        echo "‚ùå √âchec du pipeline MAR Platform"
        # Ici vous pouvez ajouter des notifications d'√©chec
