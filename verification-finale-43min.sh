#!/bin/bash

# ‚úÖ V√âRIFICATION FINALE - SOLUTION BUILD 43MIN READY
# Valide que tous les fichiers et solutions sont pr√™ts

set -e

echo "‚úÖ V√âRIFICATION FINALE SOLUTION BUILD 43MIN"
echo "==========================================="

ERRORS=0

# Fonction de v√©rification
check_file() {
    local file=$1
    local description=$2
    
    if [ -f "$file" ]; then
        size=$(wc -l < "$file" 2>/dev/null || echo "0")
        echo "‚úÖ $description : $file ($size lignes)"
    else
        echo "‚ùå MANQUANT : $file"
        ((ERRORS++))
    fi
}

check_executable() {
    local file=$1
    local description=$2
    
    if [ -x "$file" ]; then
        echo "‚úÖ $description : $file (ex√©cutable)"
    else
        echo "‚ùå NON EX√âCUTABLE : $file"
        ((ERRORS++))
    fi
}

echo ""
echo "üìã 1. FICHIERS DE CONFIGURATION"
echo "------------------------------"
check_file "requirements.fast.txt" "Requirements optimis√©s"
check_file "Dockerfile.fast" "Dockerfile optimis√©"
check_file "docker-compose.fast.yml" "Docker Compose rapide"

echo ""
echo "üìã 2. SCRIPTS D'INTERVENTION"
echo "---------------------------"
check_executable "solution-43min-build.sh" "Solution automatique"
check_executable "urgence-rebuild.sh" "Rebuild d'urgence"
check_executable "transfert-urgence-ubuntu.sh" "Transfert serveur"

echo ""
echo "üìã 3. SCRIPTS DE TEST"
echo "-------------------"
check_executable "test-build-comparison.sh" "Comparaison builds"

echo ""
echo "üìã 4. DOCUMENTATION"
echo "------------------"
check_file "RAPPORT-SOLUTION-43MIN.md" "Rapport solution compl√®te"
check_file "SOLUTION-URGENCE-BUILD.md" "Guide urgence"

echo ""
echo "üìã 5. VALIDATION CONTENU requirements.fast.txt"
echo "----------------------------------------------"
if [ -f "requirements.fast.txt" ]; then
    deps_count=$(grep -v '^#' requirements.fast.txt | grep -v '^$' | wc -l)
    echo "üì¶ Nombre d√©pendances : $deps_count"
    
    # V√©rification d√©pendances critiques
    critical_deps=("fastapi" "uvicorn" "pydantic" "langchain" "ollama")
    for dep in "${critical_deps[@]}"; do
        if grep -q "$dep" requirements.fast.txt; then
            echo "‚úÖ D√©pendance critique : $dep"
        else
            echo "‚ùå MANQUANT : $dep"
            ((ERRORS++))
        fi
    done
fi

echo ""
echo "üìã 6. VALIDATION DOCKERFILE.FAST"
echo "-------------------------------"
if [ -f "Dockerfile.fast" ]; then
    if grep -q "requirements.fast.txt" Dockerfile.fast; then
        echo "‚úÖ Dockerfile utilise requirements.fast.txt"
    else
        echo "‚ùå Dockerfile n'utilise pas requirements.fast.txt"
        ((ERRORS++))
    fi
    
    if grep -q "timeout" Dockerfile.fast; then
        echo "‚úÖ Timeouts configur√©s"
    else
        echo "‚ö†Ô∏è  Pas de timeout configur√©"
    fi
fi

echo ""
echo "üìä R√âSUM√â FINAL"
echo "==============="

if [ $ERRORS -eq 0 ]; then
    echo "üéâ TOUTES LES V√âRIFICATIONS PASS√âES"
    echo ""
    echo "üöÄ PR√äT POUR D√âPLOIEMENT URGENCE :"
    echo "1. Sur serveur Ubuntu : docker-compose down --remove-orphans"
    echo "2. Transfert : ./transfert-urgence-ubuntu.sh user@server"
    echo "3. Ex√©cution : ./solution-43min-build.sh"
    echo ""
    echo "‚è±Ô∏è  Temps attendu : 2-5 minutes (vs 43 minutes avant)"
    exit 0
else
    echo "‚ùå $ERRORS ERREURS D√âTECT√âES"
    echo ""
    echo "üîß Actions requises :"
    echo "- V√©rifier les fichiers manquants"
    echo "- Rendre les scripts ex√©cutables : chmod +x *.sh"
    echo "- Relancer cette v√©rification"
    exit 1
fi
